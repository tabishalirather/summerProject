import numpy as np
import sympy as sp
import math
from itertools import permutations
import time

limit = 1
limitsArray = []
index = 0
indexLimits = 0
indexOuter = 0
integralValue = 0


def calcIntegral(varList):
    global indexLimits
    global indexOuter
    global integralValue
    # TODO: It is not necessary to calculate all the integrals. Figure out a way to calculate just all the unique
    #  integrals and then use their values when ver need be.
    # fxn that is to be integrated
    toBeIntegrated = varList[0] ** 0

    # varList = [0, sp.Symbol('w'), sp.Symbol('x'), sp.Symbol('y'), sp.Symbol('z'), sp.Symbol('a')]
    for indexLimits in range(len(varList) - 2):
        result = sp.integrate(toBeIntegrated, (varList[-indexLimits - 1], (varList[-indexLimits - 2],
                                                                           limitsArray[indexOuter][1])))
        toBeIntegrated = result
        indexOuter += 1
    # Integrating the final integral manually, otherwise throws error, indexOuter goes out of range for the limitsArray.
    result = sp.integrate(toBeIntegrated, (varList[1], (0, 1)))
    print(f"Value of Integral is: {result}")
    integralValue += result
    return integralValue


def getAdjacencyMatrix():
    adjacencyMatrix = np.array(
        [
            [0, 1, 2, 3, 4, 5, 6],
            [1, 0, 1, 0, 0, 0, 1],
            [2, 1, 0, 1, 0, 0, 0],
            [3, 0, 1, 0, 1, 0, 0],
            [4, 0, 0, 1, 0, 1, 0],
            [5, 0, 0, 0, 1, 0, 1],
            [6, 1, 0, 0, 0, 1, 0]
        ])
    return adjacencyMatrix



def getAllPermutations(anyPermutation):
    perms = list(permutations(anyPermutation))
    allPermutations = []
    for perm in perms:
        allPermutations.append(perm)
    return allPermutations



def getVarList():
    varList = [0, sp.Symbol('w'), sp.Symbol('x'), sp.Symbol('y'), sp.Symbol('z'), sp.Symbol('a')]
    return varList


def printOneLimit(primaryNode, permutation, overlapTracker, adjacencyMatrix, varList):
    global index
    global limit
    # secondaryNode: leftmost point, varied until a connection with fixed rightmost point is found.
    for secondaryNode in range(len(permutation) - 1):
        # Start of contribution by Shaykh Umar; stop checking for connections beyond the rightmost fixed point
        if (permutation[-primaryNode - 1] == permutation[secondaryNode]):
            break
        # End of contribution by Shaykh Umar if position primaryNode and secondary node are connected and connection
        # is not overlapped, then upperLimit of primary node position is the position it is connected to,
        # which is secondaryNode.
        if (adjacencyMatrix[permutation[-primaryNode - 1]][permutation[secondaryNode]] and
                (not overlapTracker[secondaryNode])):
            print(f"UpperLimit integration variable in if   {varList[-primaryNode - 1]} "
                  f" : {1 + varList[secondaryNode]} ")
            limit = 1 + varList[secondaryNode]
            limitsArray.append(([varList[-primaryNode - 1], limit]))
            for i in range(secondaryNode, (len(permutation) - primaryNode)):
                # keeps track of overlapping connections and helps ignore limits generated by overlapping points
                overlapTracker[i] = 1
            break
        # if the connection between primary and secondary nodes is overlapping then the limit of primary node will
        # be the limit of rightMost limit. This limit is the same as limit calculated in last calculation, that's why we
        # need to use global variables, so that we can access the limit in "if" as well as "else-if" conditional.
        elif (overlapTracker[secondaryNode] == 1 and overlapTracker[-primaryNode - 1] == 1):
            # to assign the limit of rightMost limit
            print(f"UpperLimit integration variable in elif {varList[-primaryNode - 1]}  : {limit}")
            limitsArray.append(([varList[-primaryNode - 1], limit]))
            # as soon an overlapping connection is found, conditional breaks because all the connections
            # beyond(to the right) of that position will necessarily be overlapping.
            break


def printAllLimit(permutation, overlapTracker, varList, adjacencyMatrix):
    # primaryNode: rightMost point, fixed to check connections secondary node
    for primaryNode in range(math.floor((len(permutation) - 1) / 2) + 2):
        printOneLimit(primaryNode, permutation, overlapTracker, adjacencyMatrix, varList)
    sumAllIntegrals = calcIntegral(varList)
    return sumAllIntegrals


def main():
    start_time = time.time()
    adjacencyMatrix = getAdjacencyMatrix()
    anyPermutation = [1, 2, 3, 4, 5, 6]
    # gets an array with all possible permutations of parameter permutations
    permutations = getAllPermutations(anyPermutation)
    # gets the variable list
    varList = getVarList()
    # Sum of all the integrals for cyclic-biconnected graph of 6 points
    sumAllIntegrals = 0
    for indexPermutation in range(len(permutations)):
        overlapTracker = [0] * (len(anyPermutation))
        print(f"Integral Number: {indexPermutation + 1}: {permutations[indexPermutation]}")
        # overlapTracker: global variable
        sumAllIntegrals = printAllLimit(permutations[indexPermutation], overlapTracker, varList, adjacencyMatrix)
        print()
    print(f"Sum of values of all given integrals is : {sumAllIntegrals}")
    print("--- %s seconds ---" % (time.time() - start_time))


# test report Notes: Don't check for connections for if primary is less than secondary, i.e. it should not check if 4
# is connected to 5, it wil have already check that 5 is connected to 4, only check for left side, i.e. higher index
# should check for connection with lower index nodes not the other way around


main()
